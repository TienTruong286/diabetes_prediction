# -*- coding: utf-8 -*-
"""Copy of Diabetes Prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Mqbi1mQUBIlKkb6Pma1j-y17bhSX8E4f
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn import svm
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
import seaborn as sns

dataset = pd.read_csv("diabetes.csv")
dataset.head()

dataset.isnull().sum()

dataset.describe()

dataset.groupby("Outcome").mean()

dataset['Outcome'].value_counts()

# Histogram of Glucose feature
plt.figure(figsize=(8, 6))
sns.histplot(dataset['Glucose'], bins=10)
plt.title("Distribution of Glucose")
plt.xlabel("Glucose")
plt.ylabel("Count")
plt.show()

# Box plot of BMI feature
plt.figure(figsize=(8, 6))
sns.boxplot(data=dataset, x='Outcome', y='BMI')
plt.title("Box Plot of BMI")
plt.xlabel("BMI")
plt.show()

plt.figure(figsize=(8, 6))
sns.scatterplot(data=dataset, x='BMI', y='Age', hue='Outcome')
plt.title("Scatter Plot of BMI vs. Age")
plt.xlabel("BMI")
plt.ylabel("Age")
plt.show()







X = dataset.drop('Outcome', axis = 1).values
y = dataset['Outcome'].values

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.25)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

classifier = svm.SVC()
param_grid = {'kernel' : ['linear', 'rbf','polynomial'], 'C': [0.1, 1, 10]}

from sklearn.model_selection import GridSearchCV
grid_search = GridSearchCV(classifier, param_grid)

grid_search.fit(X_train, y_train)

y_prediction = grid_search.predict(X_test)

accuracy_score(y_prediction, y_test)

from sklearn.metrics import classification_report
print(classification_report(y_prediction, y_test))





